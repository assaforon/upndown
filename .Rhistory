mloc=5.6
slop=2
dk=1:m
fd=plogis(dk,location=mloc,scale=slop)
round(fd,3)
svec1=0:floor(mloc)
s=length(svec1)
mvec1=rep(NA,s)
mvec10=mvec1
for (a in 1:s)
{
mvec1[a]=weighted.mean(dk,w=pivec(cdf=plogis(dk+svec1[a],location=mloc,scale=slop),target=.5))
mvec10[a]=weighted.mean(c(0,dk),w=pivec(cdf=c(0,plogis(dk+svec1[a],location=mloc,scale=slop)),target=.5))
}
svec1
mvec1
svec1=0:floor(mloc)
s=length(svec1)
mvec1=rep(NA,s)
mvec10=mvec1
for (a in 1:s)
{
mvec1[a]=weighted.mean(dk,w=pivec(cdf=plogis(dk+svec1[a],location=mloc,scale=slop),matfun=classicmat))
mvec10[a]=weighted.mean(c(0,dk),w=pivec(cdf=c(0,plogis(dk+svec1[a],location=mloc,scale=slop)),matfun=classicmat))
}
round(mvec1,3)
round(mvec10,3)
library(upndown)
?pivec
library(upndown)
145*.1024
145*.1025
35.75 * 31.63 * 70.25
35.75 * 31.25 * 69.75
265/228
?pweib
?pweibull
round(pweibull(1:8, shape = 2, scale = 3), 3)
round(pweibull(1:8, shape = 2, scale = 10), 3)
round(pweibull(1:8, shape = 2, scale = 5), 3)
round(pweibull(1:8, shape = 2, scale = 4), 3)
plot(dweibull(1:8, shape = 2, scale = 4))
plot(pweibull(1:8, shape = 2, scale = 4))
exmapleF = pweibull(1:8, shape = 2, scale = 4)
round(classicmat(exampleF), 3)
exmapleF = pweibull(1:8, shape = 2, scale = 4)
round(classicmat(exampleF), 3)
examleF
exampleF
exampleF = pweibull(1:8, shape = 2, scale = 4)
round(classicmat(exampleF), 3)
round(classicmat(exampleF), 2)
targ2k(.9)
?k2targ
ktargOptions(.9)
round(bcdmat(exampleF, target = 0.9), 2)
round(kmatMarg(exampleF, k = 6, lowTarget = FALSE), 2)
library(upndown)
?bcdmat
ktargOptions(.9, tolerance = 0.05)
dim(kmatFull(exampleF, k = 6, lowTarget = FALSE))
29/17
29/17/12
365 * 5/7
1705/260
17*8*260
ox
ox = c(4:6, rep(7,6), rep(6,5), rep(7,4,8,8:10, rep(11,6), 12,12,rep(11,5), rep(12,3),13,13))
ox = c(4:6, rep(7,6), rep(6,5), rep(7,4),8,8:10, rep(11,6), 12,12,rep(11,5), rep(12,3),13,13))
ox = c(4:6, rep(7,6), rep(6,5), rep(7,4),8,8:10, rep(11,6), 12,12,rep(11,5), rep(12,3),13,13)
length(ox)
onx=ox
ont = (1-diff(onx))/2
table(ont)
ony = (1-diff(onx))/2
ony[ony==.5] = 1
drplot(onx, ony)
drplot(x=onx, y=ony)
traceback()
ony
udplot(onx,ony)
library(upndown)
ox = c(4:6, rep(7,6), rep(6,5), rep(7,4),8,8:10, rep(11,6), 12,12,rep(11,5), rep(12,3),13,13)
ony = (1-diff(onx))/2
ony[ony==.5] = 1
udplot(onx,ony)
ony = c(ony, 1)
udplot(onx,ony)
drplot(onx,ony)
drplot(onx,ony, addest = TRUE)
drplot(onx,ony, addest = TRUE, target = .95)
drest(onx,ony, target = .95)
udest(onx,ony, target = .95)
udest(onx/4,ony, target = .95)
udest(onx/4,ony, target = .9)
drplot(onx/4,ony, addest = TRUE, target = .95)
reversmean(onx/4, ony)
adaptmean(onx/4)
adaptmean(onx/4, full=TRUE)
adaptmean(onx/4, maxExclude=.5)
adaptmean(onx/4, maxExclude=.75)
quickInverse(onx/4,ony, target = .95, adaptiveShring = TRUE, full=TRUE)
quickInverse(x=onx/4,y=ony, target = .95, adaptiveShrink = TRUE, full=TRUE)
doseFind(x=onx/4,y=ony, target = .95, adaptiveShrink = TRUE, full=TRUE)
cirPAVA(x=onx/4,y=ony, target = .95, adaptiveShrink = TRUE, full=TRUE)
obx = c(4:6, rep(7,8), 6:7, rep(8,19), rep(7,4), rep(8,3), 9)
oby = c((1-diff(onx))/2,1)
oby[oby==.5] = 1
udplot(obx/4,oby)
oby = c((1-diff(obx))/2,1)
oby[oby==.5] = 1
udplot(obx/4,oby)
drplot(obx/4,oby)
cirPAVA(x=obx/4,y=oby, target = .95, adaptiveShrink = TRUE, full=TRUE)
udest(obx/4, oby)
udest(obx/4, oby, target=.95)
udest(onx/4, ony, target=.95)
udest(obx/4, oby, target=.95, conf=.95)
udest(onx/4, ony, target=.95, conf=.95)
cl95bupi=DRtrace(x=0.01*c(15:9,10:6,7,6,7:5,6,7:4,5,6,5:8,7,6),
y=c(rep(c(rep(1,5),0),2),1,0,1,1,0,0,rep(1,3),0,0,1,rep(0,3),1,1,0))
drplot(cl95bupi$x, cl95bupi$y)
udplot(cl95bupi$x, cl95bupi$y)
udest(cl95bupi$x, cl95bupi$y, target = .5)
drplot(cl95bupi$x, cl95bupi$y)
udest(cl95bupi$x, cl95bupi$y, target = .5, conf=.95)
drplot(cl95bupi$x, cl95bupi$y, addest= T, target=.5)
drplot(cl95bupi$x, cl95bupi$y, addest= T, target=.5,conf=.95)
drplot(cl95bupi$x, cl95bupi$y, addest= T, target=.5,conf=.95, addcurve=T)
# Bupivacaine:
bupix = 0.01 * c(15:9,10:6,7,6,7:5,6,7:4,5,6,5:8,7,6)
# With classical U&D, responses (except the last one) can be read off the doses:
bupiy=c( (1 - diff(obx))/2, 0 )
udplot(bupix,bupiy)
bupiy
# With classical U&D, responses (except the last one) can be read off the doses:
bupiy=c( (1 - diff(bupix))/2, 0 )
udplot(bupix,bupiy)
bupiy
# For convenience, we first enter doses as integers
# Bupivacaine:
bupix = c(15:9,10:6,7,6,7:5,6,7:4,5,6,5:8,7,6)
# With classical U&D, responses (except the last one) can be read off the doses:
bupiy=c( (1 - diff(bupix))/2, 0 )
# Bupivacaine:
bupix = 0.01 * c(15:9,10:6,7,6,7:5,6,7:4,5,6,5:8,7,6)
# With classical U&D, responses (except the last one) can be read off the doses:
bupiy=c( (1 - sign(diff(bupix)))/2, 0 )
udplot(bupix,bupiy)
library(upndown)
?udplot
source("~/GitHub/upndown/examples/wrapExamples.r")
abline(v=21.7,col=2)
udest(doses, responses, target = 0.5)
128/182
763+1120
1883/(1883+1218-128)
160/182
1120/(1883+1218-128)
getwd()
library(upndown)
library(data.table)
jean = fread('../../dosefinding/CIR/BCDJFFED95.csv')
dim(jean)
tail(jean,2)
table(jean$DoseNumber==jean$x)
table(jean$SuccessEventResult==jean$y)
doseResponse(jean)
library(cir)
doseResponse(jean)
quickIsotone(jean)
bcdrun = jean
doseResponse(bcdrun)
quickIsotone(bcdrun, adaptiveShrink = TRUE, target = 0.95)
?quickInverse
quickIsotone(bcdrun)
quickInverse(bcdrun, adaptiveShrink = TRUE, target = (93:95)/100, starget = 0.95)
quickInverse(bcdrun, adaptiveShrink = TRUE, target = .9, starget = 0.95)
udplot(bcdrun)
udplot(bcdrun$x, bcdrun$x)
udplot(bcdrun$x, bcdrun$y)
?udplot
udplot(bcdrun$x, bcdrun$y, cex=0.5)
drplot(bcdrun$x, bcdrun$y, cex=0.5)
drplot(bcdrun$x, bcdrun$y)
?drplot
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.95)
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95)
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95, xlim= c(12, 18))
?udest
udest(bcdrun$x, bcdrun$y, target = (93:95)/100, balancePt = 0.95)
udest(bcdrun$x, bcdrun$y, target = 0.9, balancePt = 0.95)
udest(bcdrun$x, bcdrun$y, target = 0.9, balancePt = 0.95)
udest(bcdrun$x, bcdrun$y, target = 0.95)
953*15/8
1346*1.5
plot(doseResponse(bcdrun$y, bcdrun$x), xlim= c(12, 18))
traceback()
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95, connect = TRUE, col=2)
udplot(bcdrun$x, bcdrun$y)
udplot(bcdrun$x, bcdrun$y,xlim=c(50,100))
udplot(bcdrun$x, bcdrun$y,xlim=c(30,100))
udplot(bcdrun$x, bcdrun$y,xlim=c(20,100))
limx
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95, connect = TRUE, ylim=c(.2,.8))
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95, connect = TRUE, ylim=c(.2,.8), symbcol=2)
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95, connect = TRUE, ylim=c(.2,.8), symbcol=2,addcurve=T)
drplot(bcdrun$x, bcdrun$y, addest = TRUE, target = 0.9, balancePt = 0.95, connect = TRUE, symbcol=2,addcurve=T)
library(cir)
library(upndown)
doses = c(4:7, 6:13, 12:19, 18:21, 20, 19:23, 22, 21:23, 22:19, 20:23,
22:24, 23, 22, 23, 22:25, 24:22, rep(23:24,2), 23, 22)
responses = c( (1 - sign(diff(doses)))/2, 0 )
drplot(doses, responses, main=' Dose-Response', percents = TRUE,
addest = TRUE, target = 0.5, addcurve = TRUE,
xtitle = 'Gabapentin (mg/kg)', ytitle = "Percent Effective")
drplot(doses, responses, main=' Dose-Response', percents = TRUE,
addest = TRUE, target = 0.5, addcurve = TRUE,
xtitle = 'Gabapentin (mg/kg)', ytitle = "Percent Effective", xlim=c(10,25))
drplot(doses, responses, main=' Dose-Response', percents = TRUE,
addest = TRUE, target = 0.5, addcurve = TRUE,
xtitle = 'Gabapentin (mg/kg)', ytitle = "Percent Effective", xlim=c(10,25), las=1)
library(upndown)
drplot(doses, responses, main=' Dose-Response', percents = TRUE,
addest = TRUE, target = 0.5, addcurve = TRUE,
xtitle = 'Gabapentin (mg/kg)', ytitle = "Percent Effective", xlim=c(10,25), las=1, symbcol=2)
library(cir)
?DRtrace
library(upndown)
checkNatural(1:3)
upndown:::checkNatural(1:3)
upndown:::checkNatural-(1:3)
upndown:::checkNatural(-1:3)
upndown:::checkNatural(-1:3, parname = '!')
upndown:::checkNatural(3:(-1), parname = '!')
library(upndown)
gsize = 3
x = seq (1:3, 2:4, each = gsize)
x = seq (c(1:3, 2:4), each = gsize)
x = rep(c(1:3, 2:4), each = gsize)
y = c(rep(0, 8), 1, rep(0,3), 1, 1)
udplot(x=x, y=y, cohort=gsize)
length(x)
length(y)
y = c(rep(0, 8), 1, rep(0,7), 1, 1)
udplot(x=x, y=y, cohort=gsize)
gsize = 3
x = rep(c(1:3, 2:4), each = gsize)
y = c(rep(0, 8), 1, rep(0,7), 1, 1)
udplot(x=x, y=y, cohort=gsize)
library(upndown)
gsize = 3
x = rep(c(1:3, 2:4), each = gsize)
y = c(rep(0, 8), 1, rep(0,7), 1, 1)
udplot(x=x, y=y, cohort=gsize)
gsize = 3
x = rep(c(1:3, 2:4), each = gsize)
y = c(rep(0, 8), 1, rep(0,7), 1, 1)
udplot(x=x, y=y, cohort=gsize, connect=F)
udplot(x=x, y=y, cohort=gsize, connect=FALSE, shape='triangle')
#### Note to self: Use this whenever editing the vignette for resubmission/rebuild
# tools::buildVignettes(dir = '.',  tangle=TRUE)
# dir.create("inst/doc")
# file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
# (from https://community.rstudio.com/t/browsevignettes-mypackage-saying-no-vignettes-found/68656/6)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#"
)
library(upndown)
# From Gorla et al. (2017) Table 6
gorla751x = 39 + c(3:0, 1, 2, 1:3, 2, 3, 2, 3)
# With UD data, one can usually discern the y's (except the last one) from the x's:
gorla751y =  (1 - diff(gorla751x) ) / 2
udplot(x=gorla751x, y=gorla751y, main = "Gorla et al. 2017, Material 751")
gorla751y
gorla751y
gorla751x
# With UD data, one can usually discern the y's (except the last one) from the x's:
gorla751y =  c( (1 - diff(gorla751x) ) / 2, 1)
gorla751y
udplot(x=gorla751x, y=gorla751y)
DRtrace(x=gorla751x, y=gorla751y, cohort=NULL)
plot(DRtrace(x=gorla751x, y=gorla751y, cohort=NULL))
udplot((x=gorla751x, y=gorla751y, cohort=NULL))
udplot(x=gorla751x, y=gorla751y, cohort=NULL)
traceback()
library(upndown)
udplot(x=gorla751x, y=gorla751y)
udest(x=gorla751x, y=gorla751y)
udest(x=gorla751x, y=gorla751y, target=.5)
?drplot
expression('Survived 10')
expression('Survived 10'^7)
paste(expression('Survived 10'^7))
?legend
plot(1:10, xlab=expression('hi'[5]*'there'[6]^8*'you'[2]))
quickIsotone(x=gorla751x, y=gorla751y)
quickIsotone(x=gorla751x, y=gorla751y,adaptiveShrink = T, target=.5)
udest(x=gorla751x, y=gorla751y, target = 0.95, balancePt=.5)
udest(x=gorla751x, y=gorla751y, target = 0.9, balancePt=.5)
udest(x=gorla751x, y=gorla751y, target = 0.05, balancePt=.5)
quickIsotone(x=gorla751x, y=gorla751y, adaptiveShrink = TRUE, target=.5)
doseResponse(x=gorla751x, y=gorla751y)
762/139
762/137
source("~/GitHub/upndown/examples/wrapExamples.r")
library(upndown)
source("~/GitHub/upndown/examples/wrapExamples.r")
library(cir)
source("~/GitHub/upndown/examples/wrapExamples.r")
udest(doses, responses, target = 0.5)
udest(doses, responses, target = 0.5, slopeRefinement=FALSE)
source("~/GitHub/upndown/R/cirWrappers.r")
udest(doses, responses, target = 0.5, slopeRefinement=FALSE)
source("~/GitHub/cir/R/analIntervals.r")
deltaInverse(quickIsotone(x=doses, y=responses, adaptiveCurve=T,target = 0.5), slopeRefinement=FALSE)
zo=quickIsotone(x=doses, y=responses, adaptiveCurve=T,target = 0.5,full=T)
zo=cirPAVA(x=doses, y=responses, adaptiveCurve=T,target = 0.5,full=T)
deltaInverse(zo,target = 0.5, slopeRefinement=FALSE)
deltaInverse(zo,target = 0.5)
source("~/GitHub/cir/R/analIntervals.r")
deltaInverse(zo,target = 0.5)
source("~/GitHub/cir/R/analIntervals.r")
deltaInverse(zo,target = 0.5)
source("~/GitHub/cir/R/analIntervals.r")
deltaInverse(zo,target = 0.5)
deltaInverse(zo,target = 0.5, slopeRefinement=FALSE)
library(upndown)
source("~/GitHub/upndown/examples/wrapExamples.r")
drplot(doses, responses, main=' Dose-Response', percents = TRUE,
addest = TRUE, target = 0.5, addcurve = TRUE,
xtitle = 'Gabapentin (mg/kg)', ytitle = "Percent Effective")
layout(1)
drplot(doses, responses, main=' Dose-Response', percents = TRUE,
addest = TRUE, target = 0.5, addcurve = TRUE,
xtitle = 'Gabapentin (mg/kg)', ytitle = "Percent Effective")
udest(doses, responses, target = 0.5)
?dixonmood
#### Note to self: Use this whenever editing the vignette for resubmission/rebuild
# tools::buildVignettes(dir = '.',  tangle=TRUE)
# dir.create("inst/doc")
# file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
# (from https://community.rstudio.com/t/browsevignettes-mypackage-saying-no-vignettes-found/68656/6)
knitr::opts_chunk$set(
collapse = TRUE, fig.width = 9, fig.height = 7, out.width = 900, out.height = 700,
comment = "#"
)
gorla751x = 39 + c(3:0, 1, 2, 1:3, 2, 3, 2, 3)
# With UD data, one can usually discern the y's (except the last one) from the x's:
gorla751y =  c( (1 - diff(gorla751x) ) / 2, 1)
mean(gorla751x[-1])
mean(gorla751x)
mean(c(gorla751x[-1], 41))
mean(c(gorla751x, 41))
mean(c(gorla751x[-(1:2)], 41))
mean(c(gorla751x[-(1:3)], 41))
?reversmean
reversmean(c(gorla751x, 41), gorla751y)
reversmean(c(gorla751x, 41), gorla751y,rstart=3)
reversmean(c(gorla751x, 41), gorla751y,rstart=1)
mean(c(gorla751x[7:13], 41))
reversmean(c(gorla751x, 41), gorla751y, maxExclude=.5)
gorla951x = 35 + c(1:0, 1:4, 3:2, 3:0, 1, 2, 1)
gorla951y =  c( (1 - diff(gorla951x) ) / 2, 1)
reversmean(c(gorla951x, 35), gorla951y)
reversmean(c(gorla951x, 35), gorla951y, maxExclude=.5)
0.62 * 2 * qnorm(.95)
qnorm(.95)
elfawal_short_x = 7 - c(0:2, 2:4, 4:6, 6:8, 8, 8:10, 10, 10:13, 13:15, 14, 15:11, 12, 13, 13, 12, 12, 13, 13, 13, 12, 12:15, 14, 15, 14, 14, 13, 13, 14, 13:15, 14, 13, 13, 14, 13, 14:12) / 10
# Note that we now need a more general formula
elfawal_short_y = c(ifelse(diff(elfawal_short_x) > 0, 0, 1), 1)
elfawal_long_x = 7 - c(0:1, 1:3, 3:6, 6:7, 7:8, 8:11, 10:13, 12, 13, 13, 12:15, 14:16, 16, 16, 15, rep(16, 3), 17,  rep(16, 4), 17, rep(16, 3), 17, 16, 16, 17, 16, 16, 17:14, 15, 14) / 10
elfawal_long_y = c(ifelse(diff(elfawal_long_x) > 0, 0, 1), 1)
udest(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, adaptiveShrink = TRUE, slopeRefinement=FALSE)
quickInverse(x=elfawal_long_x, y=elfawal_long_y, target = 0.9, adaptiveShrink = TRUE, slopeRefinement=FALSE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
quickInverse(x=elfawal_long_x, y=elfawal_long_y, target = 0.9, slopeRefinement=FALSE)
doseResponse(x=elfawal_long_x, y=elfawal_long_y)
dgeom(3, p=0.5)
dgeom(2, p=0.5)
dgeom(1, p=0.5)
library(cir)
?deltaInverse
library(upndown)
#### Note to self: Use this whenever editing the vignette for resubmission/rebuild
# tools::buildVignettes(dir = '.',  tangle=TRUE)
# dir.create("inst/doc")
# file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
# (from https://community.rstudio.com/t/browsevignettes-mypackage-saying-no-vignettes-found/68656/6)
knitr::opts_chunk$set(
collapse = TRUE, fig.width = 9, fig.height = 7, out.width = 900, out.height = 700,
comment = "#"
)
elfawal_short_x = 7 - c(0:2, 2:4, 4:6, 6:8, 8, 8:10, 10, 10:13, 13:15, 14, 15:11, 12, 13, 13, 12, 12, 13, 13, 13, 12, 12:15, 14, 15, 14, 14, 13, 13, 14, 13:15, 14, 13, 13, 14, 13, 14:12) / 10
# Note that we now need a more general formula
elfawal_short_y = c(ifelse(diff(elfawal_short_x) > 0, 0, 1), 1)
udest(x=elfawal_short_x, y=elfawal_short_y, target = 0.9)
udest(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, adaptiveShrink=TRUE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
udest(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
}
source("~/GitHub/upndown/R/cirWrappers.r")
udest(x=elfawal_short_x, y=elfawal_short_y, target = 0.9)
udest(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, slopeRefinement=FALSE)
library(upndown)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, adaptiveShrink=TRUE, slopeRefinement=FALSE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, adaptiveShrink=FALSE)
quickInverse(x=elfawal_short_x, y=elfawal_short_y, target = 0.9, adaptiveShrink=TRUE)
quickInverse(x=elfawal_long_x, y=elfawal_long_y, target = 0.9, adaptiveShrink=FALSE)
#### Note to self: Use this whenever editing the vignette for resubmission/rebuild
# tools::buildVignettes(dir = '.',  tangle=TRUE)
# dir.create("inst/doc")
# file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
# (from https://community.rstudio.com/t/browsevignettes-mypackage-saying-no-vignettes-found/68656/6)
knitr::opts_chunk$set(
collapse = TRUE, fig.width = 9, fig.height = 7, out.width = 900, out.height = 700,
comment = "#"
)
elfawal_long_x = 7 - c(0:1, 1:3, 3:6, 6:7, 7:8, 8:11, 10:13, 12, 13, 13, 12:15, 14:16, 16, 16, 15, rep(16, 3), 17,  rep(16, 4), 17, rep(16, 3), 17, 16, 16, 17, 16, 16, 17:14, 15, 14) / 10
elfawal_long_y = c(ifelse(diff(elfawal_long_x) > 0, 0, 1), 1)
quickInverse(x=elfawal_long_x, y=elfawal_long_y, target = 0.9, adaptiveShrink=FALSE)
quickInverse(x=elfawal_long_x, y=elfawal_long_y, target = 0.9, adaptiveShrink=TRUE, slopeRefinement=FALSE)
quickInverse(x=elfawal_long_x, y=elfawal_long_y, target = 0.9, estfun=oldPAVA,adaptiveShrink=FALSE, slopeRefinement=FALSE)
george10x = 80 + 20 * c(1, rep(2, 5), 1, 1, 0, 0, rep(1, 7), 0:2, 2, 2, rep(1, 4), 2, 1, 1, 2, 2,
rep(3, 5), 4, 5, 5, rep(4, 6))
george10y = c(ifelse(diff(george10x) > 0, 0, 1), 1)
udplot(x=george10x, y=george10y)
drplot(x=george10x, y=george10y, addest = TRUE, target = 0.9, addcurve = TRUE, balancePt = 10/11)
udest(x=george10x, y=george10y, target = 0.9, balancePt = 10/11)
udest(x=george10x, y=george10y, target = 0.9)
quickIsotone(x=george10x, y=george10y, target = 0.9)
quickInverse(x=george10x, y=george10y, target = 0.9)
quickIsotone(x=george10x, y=george10y, target = 0.9, estfun=oldPAVA)
quickInverse(x=george10x, y=george10y, target = 0.9, estfun=oldPAVA)
doseFind(x=george10x, y=george10y, target = 0.9)
doseFind(x=george10x, y=george10y, target = 0.9, adaptiveShrink=T, starget=10/11)
doseFind(x=george10x, y=george10y, target = 0.9, adaptiveShrink=T)
elfawal_long_x = 7 - c(0:1, 1:3, 3:6, 6:7, 7:8, 8:11, 10:13, 12, 13, 13, 12:15, 14:16, 16, 16, 15, rep(16, 3), 17,  rep(16, 4), 17, rep(16, 3), 17, 16, 16, 17, 16, 16, 17:14, 15, 14) / 10
elfawal_long_y = c(ifelse(diff(elfawal_long_x) > 0, 0, 1), 1)
udest(x=elfawal_long_x, y=elfawal_long_y, target = 0.9)
udest(x=elfawal_long_x, y=elfawal_long_y, target = 0.9,slopeRefinement=F)
doseFind(x=george10x, y=george10y, target = 0.9, adaptiveShrink=F)
doseFind(x=george10x, y=george10y, target = 0.9, adaptiveShrink=T)
quickInverse(x=george10x, y=george10y, target = 0.9, adaptiveShrink=F)
deltaInverse(x=george10x, y=george10y, target = NULL, adaptiveShrink=F)
deltaInverse(cirPAVA(x=george10x, y=george10y, full=T), target = NULL, adaptiveShrink=F)
a
cirPAVA(x=george10x, y=george10y, full=T)
cirPAVA(x=george10x, y=george10y, full=T, adaptiveShrink=T, target=10/11)
quickIsotone(x=george10x, y=george10y, adaptiveShrink=T, target=10/11)
library(upndown)
library(upndown)
?reversmean
?udplot
?checkDose
library(upndown)
?reversmean
?choiEst
choiEst
upndown:::choiEst
?cumulvec
cumulvec(seq(.1,.6,.1),bcdfun,20)
cumulvec(seq(.1,.6,.1),bcdfun,20,startdose=1)
cumulvec(seq(.1,.6,.1),matfun=bcdfun,20,startdose=1)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,20,startdose=1)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,20,startdose=1,target=.2)
?`%^%`
source("~/GitHub/upndown/R/vectorFunctions.r")
library(upndown)
currentvec(seq(.1,.6,.1),matfun=bcdmat,20,startdose=1,target=.2)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,20,startdose=1,target=.2)
library(upndown)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,20,startdose=1,target=.2)
rm(list=ls())
library(upndown)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,20,startdose=1,target=.2)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,20,target=.2)
currentvec(seq(.1,.6,.1),matfun=bcdmat,20,target=.2)
cumulvec(seq(.1,.6,.1),matfun=bcdmat,50,target=.2)
?dixonmood
?udplot
?dixonmood
tools::buildVignettes(dir = '.',  tangle=TRUE)
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
getwd()
tools::buildVignettes(dir = '.',  tangle=TRUE)
library(upndown)
library(upndown)
ktargOptions(.3)
par()
op <- par(no.readonly = TRUE)
part(layout=1:2)
part(layout=matrix(1:2)
)
par(xaxt='n')
plot(1:5)
par(op)
plot(1:5)
layout(t(1:2), widths=3:2)
plot(1:5)
par(op)
plot(1:5)
library(upndown)
ktargOptions(.3)
library(upndown)
ktargOptions(.3)
